// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Equipments.Equipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime>("InstallationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("installation_date");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("location");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("model");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("serial_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_equipment");

                    b.HasIndex("SerialNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_equipment_serial_number");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("Domain.MaintenanceSchedules.MaintenanceSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("equipment_id");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("frequency");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<DateTime>("NextDueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_due_date");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("task_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_maintenance_schedule");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("ix_maintenance_schedule_equipment_id");

                    b.ToTable("maintenance_schedule", (string)null);
                });

            modelBuilder.Entity("Domain.WorkOrders.WorkOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<string>("CompletionNotes")
                        .HasColumnType("varchar(2000)")
                        .HasColumnName("completion_notes");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("equipment_id");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("priority");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("WorkOrderNumber")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("work_order_number");

                    b.HasKey("Id")
                        .HasName("pk_work_order");

                    b.HasIndex("EquipmentId")
                        .HasDatabaseName("ix_work_order_equipment_id");

                    b.HasIndex("WorkOrderNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_work_order_work_order_number");

                    b.ToTable("work_order", (string)null);
                });

            modelBuilder.Entity("Domain.MaintenanceSchedules.MaintenanceSchedule", b =>
                {
                    b.HasOne("Domain.Equipments.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_maintenance_schedule_equipment_equipment_id");
                });

            modelBuilder.Entity("Domain.WorkOrders.WorkOrder", b =>
                {
                    b.HasOne("Domain.Equipments.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_work_order_equipment_equipment_id");
                });
#pragma warning restore 612, 618
        }
    }
}
